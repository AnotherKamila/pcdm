#!/bin/sh
# Login daemon for PCDM
# This starts the main PCDM UI appropriately
#------------------------------------
#echo "[PCDM] starting daemon..."

findOpenDisplay(){
  num=0
  while [ -e /tmp/.X11-unix/X${num} ]
  do
    num=`expr $num + 1`
  done
  DISPLAYNUM=${num}
  return $num
}

VT=${1}
if [ -z ${VT} ] ; then
  echo "Unknown VT: ${VT}"
  echo "Please supply a virtual terminal that PCDM should start on (example: "vt9")"
  exit 1;
fi
#echo "PCDMd Init: $1 $2"
PCDMCONF="/usr/local/etc/pcdm.conf"
BASEPCDMAUTHFILE="/var/tmp/.PCDMAuth-${VT}"
STOPFILE="/var/tmp/.PCDMstop-${VT}"
#Quick check that this is not the "stop" command
if [ "${2}" = "stop" ]; then
  touch ${STOPFILE}
  pkill -f "pcdm-session.${VT}"
  if [ 1 -eq $? ] ; then
    pkill -f "PCDM-session -once ${VT}"
  fi
  exit 0
elif  [ -f ${STOPFILE} ]; then
  rm ${STOPFILE}
fi

if [ -e "$STOPFILE" ] ; then rm $STOPFILE; fi

XOPTS=""
grep -q "^ENABLE_TCP_LISTEN=TRUE" ${PCDMCONF}
if [ $? -ne 0 ]; then
  XOPTS="-nolisten tcp" 
else
  XOPTS="-listen tcp"
fi
#set the DISAPLAYNUM variable
findOpenDisplay


#See if VNC support is enabled for logging in to this system
grep -q "^ALLOW_REMOTE_LOGIN=TRUE" ${PCDMCONF}
if [ $? -eq 0 ]; then
   # Setup default vnc server opts
   vncopts="-forever "
   grep -q "^REMOTE_SHARED_SCREEN=TRUE" ${PCDMCONF}
   if [ $? -eq 0 ] ; then 
     vncopts="-shared "
   else
     vncopts="-nevershared "
   fi
   if [ -e "/usr/local/etc/vncpass" ] ; then
     vnccmd="x11vnc -display :${DISPLAYNUM} $vncopts -passwdfile /usr/local/etc/vncpass -loop"
   else
     echo "WARNING: VNC enabled but no password in /usr/local/etc/vncpass!"
     sleep 5
   fi

fi


# Remove a stale shutdown update trigger
if [ -e "/var/db/pc-updatemanager/.doingShutdownUpdate" ] ; then
  rm /var/db/pc-updatemanager/.doingShutdownUpdate
fi

# Clear out a failed marker
if [ -e "/var/tmp/.pcdm-x-failed-${VT}" ] ; then
  rm /var/tmp/.pcdm-x-failed-${VT}
fi

# Now start the X Server
#echo "  [PCDM] Starting Xorg init"
touch /var/tmp/.PCDMAutoLogin-${VT} # Allow Auto-Login the first time PCDM starts
while [ ! -e /var/run/nologin -a ! -e ${STOPFILE} ]; do
  if [ ! -e /etc/machine-id ] || [ ! -e /var/db/dbus/machine-id ]; then
    #detect/prevent Qt from crashing if the DBUS id file is non existant
    dbus-uuidgen --ensure >/dev/null 2>/dev/null
  fi

  # Randomize the authorization file location
  PCDMAUTHFILE=${BASEPCDMAUTHFILE}-`openssl rand -hex 10`
  # Make sure the authorization file does not exist
  if [ -f ${PCDMAUTHFILE} ] ; then
    rm ${PCDMAUTHFILE}
  fi
#  echo "  [PCDM] Generated auth file: ${PCDMAUTHFILE}"
  export XAUTHORITY=${PCDMAUTHFILE} #Set the auth file location
  touch ${PCDMAUTHFILE} #Create the (empty) authorization file
  xauth -f ${PCDMAUTHFILE} add :${DISPLAYNUM} MIT-MAGIC-COOKIE-1 `openssl rand -hex 64` #Add a default entry to the file (randomized)
  if [ -n "$vnccmd" ] ; then
    # Start VNC
    (sleep 10 ; $vnccmd >/var/log/vncserver 2>/var/log/vncserver) &
  fi

  # Remove our X success marker
  if [ -e "/var/tmp/.pcdm-x-started-${VT}" ] ; then rm /var/tmp/.pcdm-x-started-${VT}; fi
  echo "  [PCDM] Starting PCDM-session"
  xinit /usr/local/bin/PCDM-session -once ${VT} -- :${DISPLAYNUM} -auth ${PCDMAUTHFILE} $XOPTS ${VT} 2>/dev/null
     if [ $? != 0 ] && [ ! -e "/var/tmp/.pcdm-x-started-${VT}" ] && [ ! -e ${STOPFILE} ] ; then
        # Looks like X failed to start...
         # touch /var/.runxsetup
          touch ${STOPFILE}
     fi

  #Now remove the authorization file
  rm ${PCDMAUTHFILE}

  # We are shutting down
  if [ -e "/var/db/pc-updatemanager/.doingShutdownUpdate" ] ; then
     rm /var/db/pc-updatemanager/.doingShutdownUpdate
     touch ${STOPFILE}
  fi
done

rm ${STOPFILE} 2>/dev/null

return 0
